// A proof checker for ulang in ulang

////////////////////// start prelude.u ///////////////////////////////////////
notation
  ==  [infix 6];
  !=  [infix 6];
  not [prefix 5];
  /\  [infixr 4];
  \/  [infixr 3];
  ==> [infixr 2];
  <=> [infix  1];

define
  (a <=> b) == ((a ==> b) /\ (b ==> a));
////////////////////// end prelude.u /////////////////////////////////////////

// pairs
data
  ,;
notation
  , [infixr 6];

// lists
data
  [] ::;
notation
  :: [infixr 8]
  ∈  [infix  7]
define
  x ∈ []      == False;
  x ∈ (y::ys) == if x == y then True else elem x ys;


// top level proof checker for a proof p and a goal g
check p g = checkWithContext [] p g

// internal proof checker with a context
checkC c p g = if (p,g) ∈ c then True else checkProof c p g

checkProof c p False == False
checkProof c Trivial True == True
checkProof c (p,q) (a /\ b) == checkC c p a /\ checkC c q b
checkProof c (Left p) (a \/ b) == checkC c p a
checkProof c (Right p) (a \/ b) == checkC c p b
checkProof c p (a ==> b) == checkC ((q,a)::c) (p q) b
checkProof c (w,p) (exists x.a) == checkC c
checkProof c p (forall x.a) ==
