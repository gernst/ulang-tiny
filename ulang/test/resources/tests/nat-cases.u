data 0 +1;
notation +1 [postfix 10];

show
  // induction schema for Nat
  (forall p n. (n: Nat) ==> (p 0) ==> (forall m. (m: Nat) ==> p m ==> p (m +1)) ==> p n) ==>
  // intro axioms for natural numbers
  (0: Nat) ==>
  (forall m. (m: Nat) ==> (m +1: Nat)) ==>
  // equality
  (forall x. x == x) ==>
  (forall x y. x == y ==> y == y) ==>
  (forall x y z. x == y ==> y == z ==> x == z) ==>
  // TODO the injectivity of constructors should be extractable by the system
  (forall x y. x +1 == y +1 ==> x == y) ==>
  (forall x y. x == y ==> x +1 == y +1) ==>
  // the theorem
  (forall n. n: Nat ==> n == 0 \/ exists m. n == m +1 /\ m: Nat);
proof term
  lambda i
    z1 s1
    eqR eqS eqT
    inj coInj ->
  forall n.
    lambda nNat ->
      Inst i (lambda n -> n == 0 \/ exists m. n == m +1 /\ m: Nat) lambda i ->
      Inst i n lambda i ->
      // base case of the induction
      Cut (0 == 0 \/ exists m. 0 == m +1 /\ m: Nat)
          (Inst eqR 0 lambda eq0 -> Left eq0)
      lambda base ->
      // induction step
      Cut (forall m. m: Nat ==>
		     (m == 0 \/ exists m1. m == m1 +1 /\ m1: Nat) ==>
		     m +1 == 0 \/ exists m2. (m +1 == m2 +1 /\ m2: Nat))
	  (forall m. lambda mNat ->
	     lambda (Left ih) -> Right (Witness m2 0
					(Inst coInj m lambda coInj ->
					   Inst coInj 0 lambda coInj ->
					     coInj ih
					, z1))
		  | (Right ih) -> Right (Witness m2 m
					 (Inst eqR (m +1) lambda x -> x, mNat))
        	)
      lambda step ->
	i nNat base step;
