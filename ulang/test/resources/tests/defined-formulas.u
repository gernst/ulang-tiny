// Functions can compute formulas
// "Unfold" can be used to look up the definition


lemma unfold-simple-negation;
show not (not (not a)) ==> not a;
proof term
  lambda (Unfold h3n) ->
  Unfold lambda ha ->
  Cut (not (not a))
      (Unfold lambda (Unfold h1n) -> h1n ha)
  lambda h2n ->
  h3n h2n;


define
  reflexive p := forall x. p x x;
  symmetric p := forall x y. p x y ==> p y x;
  transitive p := forall x y z. p x y ==> p y z ==> p x z;
  global p := forall x. exists y. p x y;

lemma unfold-quantifiers;
show forall p. global p ==> symmetric p ==> transitive p ==> reflexive p;
proof term
  forall p.
    lambda (Unfold glob) (Unfold sym) (Unfold trans) -> Unfold
      forall x.
        Inst glob x lambda (Witness w ex) ->
	Inst sym x lambda sym ->
	Inst sym w lambda sym ->
	Inst trans x lambda trans ->
	Inst trans w lambda trans ->
	Inst trans x lambda trans ->
          trans ex (sym ex);

define
  reflexive2 p x := p x x;
  symmetric2 p x := forall y. p x y ==> p y x;
  transitive2 p x := forall y z. p x y ==> p y z ==> p x z;
  inhab p x := exists y. p x y;

lemma unfold-nested-pattern;
show forall p x. inhab p x ==> symmetric2 p x ==> transitive2 p x ==> reflexive2 p x;
proof term
  forall p x.
    lambda (Unfold (Witness w ex)) (Unfold sym) (Unfold trans) ->
      Unfold (
	Inst sym w lambda sym ->
	Inst trans w lambda trans ->
	Inst trans x lambda trans ->
	  trans ex (sym ex));


data : 0 +1;
notation +1 [postfix 10];
define
  zeroNat := 0: Nat;

lemma unfold-axioms-consts;
assume
  s := forall n. n: Nat ==> n +1: Nat;
  zeroNat;
show 0 +1 +1: Nat;
proof term
  lambda (Unfold z) ->
  Inst s 0 lambda s0 ->
  Inst s (0 +1) lambda s1 ->
  s1 (s0 z);

define
  succNat := forall n. n: Nat ==> n +1: Nat;

lemma unfold-axioms-unbounded-quantifier;
show zeroNat ==> succNat ==> 0 +1 +1: Nat;
proof term
  lambda (Unfold z) (Unfold s) ->
  Inst s 0 lambda s0 ->
  Inst s (0 +1) lambda s1 ->
  s1 (s0 z);
