data 0 +1;
notation +1 [postfix 10];

define inf := inf +1;

assume
  // coinduction
  c := forall p n. p n ==>
    (forall n. p n ==> n == 0 \/ exists m. n == m +1 /\ (m: NatInf \/ p m)) ==>
    n: NatInf;

  // equality
  eqR := forall x. x == x;
  eqS := forall x y. x == y ==> y == x;
  eqT := forall x y z. x == y ==> y == z ==> x == z;

show
  inf: NatInf;

proof term
  Inst c (lambda n -> n == inf) lambda c ->
  Inst c inf lambda c ->
  Inst eqR inf lambda infEqInf ->
  Cut (forall n. n == inf ==>
	 n == 0 \/ exists m. n == m +1 /\ (m: NatInf \/ m == inf))
      (forall n.
	 lambda nInf ->
	   Right (Witness inf
	     (Inst eqT n lambda t ->
	      Inst t inf lambda t ->
	      Inst t (inf +1) lambda t ->
	      Def inf lambda infSucc ->
		t nInf infSucc,
	      Right infEqInf)))
  lambda cut -> c infEqInf cut;
