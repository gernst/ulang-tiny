// some simple proof terms for simple propositions
//////////////////////////////////////////////////

show True;
proof term True;

// identity
show a ==> a;
proof term (lambda x -> x);

// weakening
show a ==> b ==> a;
proof term (lambda x -> lambda y -> x);

// detour in a proof
show a ==> a;
proof term (lambda v -> (lambda u -> u) v);

// chaining
show (b ==> c) ==> (a ==> b) ==> a ==> c;
proof term lambda f -> lambda g -> lambda x -> f (g x);

// order invariance
show (a ==> b ==> c) ==> b ==> a ==> c;
proof term lambda x -> lambda y -> lambda z -> x z y;

// some introduction rules for logical connectives (predicate logic)
////////////////////////////////////////////////////////////////////

show a ==> a /\ a;
proof term (lambda x -> (x,x));

show a ==> b ==> a /\ b;
proof term (lambda x -> lambda y -> (x,y));

show a ==> a \/ b;
proof term (lambda x -> Left x);

show b ==> a \/ b;
proof term (lambda x -> Right x);

// some elimination rules for logical connectives (predicate logic)
///////////////////////////////////////////////////////////////////

show a /\ b ==> a;
proof term (lambda (x,y) -> x);
show a /\ b ==> b;
proof term (lambda (x,y) -> y);
show a /\ b ==> (a ==> b ==> c) ==> c;
proof term lambda (x,y) -> lambda f -> f x y;

// modus ponens
show a ==> (a ==> b) ==> b;
proof term lambda x -> lambda f -> f x;
show (a ==> b) ==> a ==> b;
proof term lambda f -> lambda x -> f x;

// all the above can also be proven by the "auto" tactic
////////////////////////////////////////////////////////

show True;
show a ==> a;
show a ==> b ==> a;
show (b ==> c) ==> (a ==> b) ==> a ==> c;
show (a ==> b ==> c) ==> b ==> a ==> c;
show a ==> a /\ a;
show a ==> b ==> a /\ b;
show a ==> a \/ b;
show b ==> a \/ b;
show a /\ b ==> a;
show a /\ b ==> b;
show a /\ b ==> (a ==> b ==> c) ==> c;
show a ==> (a ==> b) ==> b;
show (a ==> b) ==> a ==> b;

// general proof terms can be used to proof concrete formulas
/////////////////////////////////////////////////////////////

show a /\ b ==> a /\ b;
proof term lambda x -> x;
show a /\ b \/ c ==> a /\ b \/ c;
proof term lambda x -> x;
show (A ==> A) ==> (A ==> A);
proof term lambda x -> x;

// pattern matching in proofs
/////////////////////////////
show a /\ b ==> b /\ a;
proof term lambda (x,y) -> (y,x);
