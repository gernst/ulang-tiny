notation
  :  [infix 6];
  == != [infix 6];

data
  0 +1;

notation
  +1  [postfix 11];
  + - [infixl   8];
  < <= > >= [infix 6];

data
  [] ::;

notation
  :: [infixr 8];
  ++ [infixr 7];

define
  id x == x;
  const x y == x;
  1 == 0 +1;
  2 == 1 +1;
  3 == 2 +1;
  4 == 3 +1;
  inf == inf +1;
  m + 0 == m;
  m + (n +1) == (m + n) +1;
  (m < 0) == False;
  (0 < n +1) == True;
  (m +1 < n +1) == (m < n);
  half 0 == 0;
  half (0 +1) == 0;
  half (n +1 +1) == half n +1;
  
  
show half 0 == 0;
show half 1 == 0;
show half 2 == 1;
show half 3 == 1;
show half 4 == 2;

notation
  not [prefix 5];
  /\  [infixr 4];
  \/  [infixr 3];
  ==> [infixr 2];
  <=> [infix  1];

eval
  let x = 1, y = 1
  in x + y;
  
  let f = (lambda x -> x +1)
  in f 0;

  match 1 with
    (n +1) -> n;

inductive
  True:  Bool;
  False: Bool;

assume b: Bool;
show b == True \/ b == False;
proof cases b: Bool;

inductive
  0: Nat;
  n: Nat ==> n +1: Nat;

coinductive
  0: NatInf;
  n: NatInf ==> n +1: NatInf;

assume k: Nat;
show k < k +1;
proof induction k: Nat;

assume not True;
show P;

show True;
show p <=> p;
show x == x;
show 1 == 0 +1;
show p /\ q <=> p;
show p /\ q <=> q /\ p;

assume p; p ==> q; q ==> r;
show   r;

assume x == z; p z;
show   p x;

assume n: Nat;
show P n;
proof cases n: Nat;

inductive
  []: List a;
  x: a /\ xs: List a ==> (x :: xs): List a;

define
  [] ++ ys == ys;
  (x :: xs) ++ ys == x :: (xs ++ ys);

assume
  ys: List a;
  xs: List a;
show
  xs ++ ys: List a;
proof induction xs: List a;

assume
  xs: List a;
show
  (xs ++ ys) ++ zs == xs ++ (ys ++ zs);
proof induction xs: List a;

assume
  forall x -> p x;
show
  p y;

