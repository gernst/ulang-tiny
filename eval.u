notation
  :  [infix 6];
  == != [infix 6];

data
  0 +1;

notation
  +1  [postfix 11];
  + - [infixl   8];
  < <= > >= [infix 6];

data
  [] ::;

notation
  :: [infixr 8];
  ++ [infixr 7];

define
  id x == x;
  const x y == x;
  1 == 0 +1;
  2 == 1 +1;
  3 == 2 +1;
  4 == 3 +1;
  inf == inf +1;
  m + 0 == m;
  m + (n +1) == (m + n) +1;
  (m < 0) == False;
  (0 < n +1) == True;
  (m +1 < n +1) == (m < n);
  half 0 == 0;
  half (0 +1) == 0;
  half (n +1 +1) == half n +1;

notation
  not [prefix 5];
  /\  [infixr 4];
  \/  [infixr 3];
  ==> [infixr 2];
  <=> [infix  1];

eval
  let x = 1, y = 1
  in x + y;
  
  let f = (lambda x -> x +1)
  in f 0;

  match 1 with
    (n +1) -> n;

test
  1 == 1;
  1 + 1 == 2;

