notation
  :  [infix 6];
  == != [infix 6];
  ==> [infixr 2];

define
  (x == y) ==> (x != y) := False ;
  (x == y) == False ==> (x != y) := True;

data
  0 +1;

notation
  +1  [postfix 11];
  + - [infixl   8];
  *   [infixl   9];
  < <= > >= [infix 6];

define
  1 := 0 +1;
  2 := 1 +1;
  3 := 2 +1;
  4 := 3 +1;
  5 := 4 +1;
  6 := 5 +1;
  7 := 6 +1;

  m + 0 := m;
  m + (n +1) := (m + n) +1;
  m * 0 := 0;
  m * (n +1) := (m * n) + m;

  (m < 0) := False;
  (0 < n +1) := True;
  (m +1 < n +1) := (m < n);

// Peano axioms
inductive
  0: Nat;
  n: Nat ==> n +1: Nat;
// Peano axioms
assume
  n: Nat;
  m: Nat;
  k: Nat;
  not ((n +1) == 0);
  n +1 == m +1 ==> n == m;

// TODO, siehe auch debug.u
//assume n: Nat; m: Nat; k: Nat;
show (n + m) + k == n + (m + k);
proof induction k: Nat;

test
 0 + 0 == 0;
 0 + 1 == 1;
 0 + 2 == 2;
 0 + 3 == 3;
 0 + 4 == 4;

// lemma for commutativity
assume n: Nat;
show 0 + n == n;
proof induction n: Nat;
//assume n: Nat; (Nat == Nat); (0 == n);

// show n + m == m + n;
// proof induction m: Nat;
